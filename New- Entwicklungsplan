<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Odoo Partner Manager Onboarding-Tool</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f8f9fa;
        }
        .odoo-purple-dark { color: #714b67; }
        .bg-odoo-purple-dark { background-color: #714b67; }
        .bg-odoo-purple-light { background-color: #e9d5ff; }
        .border-odoo-purple-dark { border-color: #714b67; }
        .focus-ring-odoo:focus {
            --tw-ring-color: #a78bfa;
            border-color: #714b67;
        }
        .transition-all { transition: all 0.3s ease-in-out; }
        
        @media print {
            body * { visibility: hidden; }
            .print-area, .print-area * { visibility: visible; }
            .print-area { position: absolute; left: 0; top: 0; width: 100%; padding: 2rem; }
            .no-print { display: none !important; }
            canvas {
                max-width: 100% !important;
                height: auto !important;
            }
        }
    </style>
</head>
<body class="text-gray-800">

    <div class="container mx-auto p-4 sm:p-6 lg:p-8">

        <!-- Main View: Plan Overview -->
        <div id="main-view">
            <header class="mb-8 text-center">
                <h1 class="text-4xl font-bold odoo-purple-dark">Partner Manager Onboarding</h1>
                <p class="text-lg text-gray-600 mt-2">Ein 6-Phasen-Entwicklungsplan bei Odoo</p>
            </header>

            <!-- Employee Management Section -->
            <div class="bg-white p-6 rounded-xl shadow-md mb-8 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 items-end no-print">
                <div>
                    <label for="employeeSelector" class="block text-sm font-medium text-gray-700 mb-1">Mitarbeiter auswählen</label>
                    <select id="employeeSelector" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus-ring-odoo"></select>
                </div>
                <div class="flex gap-x-2">
                    <button id="addEmployeeBtn" class="w-full bg-odoo-purple-dark text-white font-bold py-2 px-4 rounded-lg hover:bg-opacity-80 transition-all shadow-sm">Neu anlegen</button>
                    <button id="deleteEmployeeBtn" class="w-full bg-red-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-red-700 transition-all shadow-sm disabled:opacity-50 disabled:cursor-not-allowed" disabled>Löschen</button>
                </div>
                <div class="sm:col-span-2 lg:col-span-1 text-right">
                     <button id="showOverallOutputBtn" class="w-full lg:w-auto bg-odoo-purple-dark text-white font-bold py-2 px-4 rounded-lg hover:bg-opacity-80 transition-all shadow-sm disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                        Gesamt-Output
                    </button>
                </div>
            </div>
             <p class="text-xs text-center text-gray-500 mb-8 no-print">Hinweis: Alle Daten werden lokal in Ihrem Browser gespeichert.</p>


            <!-- Dynamic Content Area -->
            <div id="content-area">
                <!-- Welcome screen or employee plan will be rendered here -->
            </div>
        </div>

        <!-- Details View: Phase/Overall Output -->
        <div id="details-view" class="hidden">
            <!-- Content will be generated by JavaScript -->
        </div>

        <!-- Modal -->
        <div id="modal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex items-center justify-center z-50 no-print">
            <div class="bg-white p-8 rounded-lg shadow-xl w-full max-w-md mx-4">
                <h3 id="modalTitle" class="text-2xl font-bold mb-4 odoo-purple-dark"></h3>
                <div id="modalBody" class="mb-6 text-gray-700"></div>
                <div id="modalActions" class="flex justify-end gap-4">
                    <button id="modalCancelBtn" class="bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded-lg hover:bg-gray-400 transition-all">Abbrechen</button>
                    <button id="modalConfirmBtn" class="text-white font-bold py-2 px-4 rounded-lg transition-all"></button>
                </div>
            </div>
        </div>

    </div>

    <script>
    // --- DATA MANAGEMENT ---
    let appData = {
        employees: {},
        currentEmployeeId: null
    };

    const defaultPlanTemplate = [
        {
            phase: 1, title: "Onboarding & Grundlagen", goals: ["Odoo-Kultur & Produkt verstehen", "Kernmodule kennenlernen", "Partnerprogramm verstehen"],
            focus: [
                { text: "Abschluss funktionales Onboarding", completed: false }, { text: "Selbstständig Demo-Datenbanken einrichten und flüssig Flows zeigen", completed: false },
                { text: "Einführung in das interne CRM & Pipeline", completed: false }, { text: "Erste Partner kennenlernen", completed: false },
            ],
            output: { text: "Kann Kernvorteile von Odoo und Partnerprogramm erklären.", status: "Nicht begonnen" },
            competencies: [{ name: "Odoo-Kultur", rating: 0 }, { name: "Produktwissen", rating: 0 }, { name: "Partnerprogramm", rating: 0 }], notes: ""
        },
        {
            phase: 2, title: "Erste praktische Schritte", goals: ["Erste Partnergespräche führen", "CRM-Disziplin entwickeln", "Standard-Einwände beantworten"],
            focus: [
                { text: "Shadowing bei erfahrenen Odoolern", completed: false }, { text: "Erste Qualifikation mit einem Kunden", completed: false },
                { text: "Erste Partner-Check-ins (begleitet)", completed: false }, { text: "CRM-Datenpflege", completed: false },
            ],
            output: { text: "Kann einen Partner-Call vorbereiten, durchführen (beobachtet) und dokumentieren.", status: "Nicht begonnen" },
            competencies: [{ name: "Gesprächsvorbereitung", rating: 0 }, { name: "CRM-Disziplin", rating: 0 }, { name: "Einwandbehandlung", rating: 0 }], notes: ""
        },
        {
            phase: 3, title: "Zunehmende Selbstständigkeit", goals: ["Kleine Partner selbst betreuen", "Produkt-Use-Cases nutzen", "Pipeline selbst pflegen"],
            focus: [
                { text: "Einstieg in den ersten Direct Sales Cycle mit Kunden", completed: false }, { text: "Eigenständiges CRM-Management", completed: false },
                { text: "Erste Demo mit Kunden durchführen", completed: false }, { text: "Erstes Partner-Onboarding durchführen", completed: false },
            ],
            output: { text: "Kann Partner ansprechen, qualifizieren und einfache Business Cases präsentieren.", status: "Nicht begonnen" },
            competencies: [{ name: "Präsentation", rating: 0 }, { name: "Pipeline Mgmt.", rating: 0 }, { name: "Qualifizierung", rating: 0 }], notes: ""
        },
        {
            phase: 4, title: "Strategische Entwicklung", goals: ["Go-to-Market-Ansätze entwickeln", "Cross-/Upselling-Chancen erkennen", "Partner-Retention"],
            focus: [
                { text: "Ersten Partner vollständig onboarden", completed: false }, { text: "Erste Preisverhandlung mit DS-Kunden führen", completed: false },
                { text: "Analyse der Partner Pipe", completed: false }, { text: "Forecasting", completed: false },
            ],
            output: { text: "Kann Partner beraten, ihr Angebot zu vermarkten und erste Prognosen zu machen.", status: "Nicht begonnen" },
            competencies: [{ name: "GTM-Strategie", rating: 0 }, { name: "Business Case", rating: 0 }, { name: "Forecasting", rating: 0 }], notes: ""
        },
        {
            phase: 5, title: "Projekt- & Consulting-Einblicke", goals: ["Partner bei kleinen Projekten begleiten", "Austausch mit Consultants", "Kundenfeedback nutzen"],
            focus: [
                { text: "Erste Demo für ein Partnerprojekt", completed: false }, { text: "Erste Preisverhandlung für ein Partnerprojekt", completed: false },
                { text: "Ersten NRR-Verkauf", completed: false }, { text: "Fortgeschrittene CRM-Auswertungen nutzen", completed: false },
            ],
            output: { text: "Kann Partnerprojekte einschätzen, Probleme melden und Unterstützung organisieren.", status: "Nicht begonnen" },
            competencies: [{ name: "Projekt-Verständnis", rating: 0 }, { name: "Kollaboration", rating: 0 }, { name: "Konfliktlösung", rating: 0 }], notes: ""
        },
        {
            phase: 6, title: "Autonomie & Planung", goals: ["Kleinen Partnerstamm betreuen", "Quartalsziele erreichen", "Grundlage für High Enablement legen"],
            focus: [
                { text: "Beziehungsaufbau mit Top Partnern", completed: false }, { text: "Erster Lizenzverkauf für ein Partnerprojekt", completed: false },
                { text: "Vertiefung in Pricing & Verträge", completed: false }, { text: "Selbstreflexion und eigene Stärken- & Schwächenanalyse", completed: false },
            ],
            output: { text: "Kann mehrere Partner selbstständig betreuen und systematisch Umsatz entwickeln.", status: "Nicht begonnen" },
            competencies: [{ name: "Partner-Mgmt.", rating: 0 }, { name: "Verhandlung", rating: 0 }, { name: "Reporting", rating: 0 }], notes: ""
        }
    ];

    const competencyLevels = ['-', 'Grundlagen', 'Solide', 'Fortgeschritten', 'Experte'];
    let chartInstance = null;
    let modalConfirmCallback = null;

    function saveData() {
        localStorage.setItem('odooOnboardingToolData', JSON.stringify(appData));
    }

    function loadData() {
        const savedData = localStorage.getItem('odooOnboardingToolData');
        if (savedData) {
            appData = JSON.parse(savedData);
        }
    }

    // --- VIEW MANAGEMENT ---
    const mainView = document.getElementById('main-view');
    const detailsView = document.getElementById('details-view');
    const contentArea = document.getElementById('content-area');

    function showDetailsView(phaseIndex) {
        mainView.classList.add('hidden');
        detailsView.classList.remove('hidden');
        renderDetailsView(phaseIndex);
    }

    function showMainView() {
        detailsView.classList.add('hidden');
        mainView.classList.remove('hidden');
        renderApp();
    }
    
    // --- RENDER FUNCTIONS ---
    function renderApp() {
        renderEmployeeSelector();
        const currentEmployee = appData.employees[appData.currentEmployeeId];
        if (currentEmployee) {
            renderPlan(currentEmployee);
        } else {
            renderWelcomeView();
        }
        updateButtons();
    }

    function renderWelcomeView() {
        contentArea.innerHTML = `
            <div class="text-center py-16 bg-white rounded-lg shadow-md">
                <h2 class="text-2xl font-semibold text-gray-700">Willkommen!</h2>
                <p class="text-gray-500 mt-2">Bitte wählen Sie einen Mitarbeiter aus der Liste aus oder legen Sie einen neuen an, um zu beginnen.</p>
            </div>
        `;
    }

    function renderEmployeeSelector() {
        const selector = document.getElementById('employeeSelector');
        selector.innerHTML = '<option value="">-- Bitte auswählen --</option>';
        const sortedEmployees = Object.values(appData.employees).sort((a, b) => a.name.localeCompare(b.name));
        sortedEmployees.forEach(employee => {
            const option = document.createElement('option');
            option.value = employee.id;
            option.textContent = employee.name;
            if (employee.id === appData.currentEmployeeId) {
                option.selected = true;
            }
            selector.appendChild(option);
        });
    }
    
    function renderPlan(employee) {
        contentArea.innerHTML = `
            <div class="mb-8 no-print">
                <h2 class="text-xl font-semibold mb-2">Gesamtfortschritt für ${employee.name} (Aufgaben)</h2>
                <div class="w-full bg-odoo-purple-light rounded-full h-4">
                    <div id="overall-progress-bar" class="bg-odoo-purple-dark h-4 rounded-full transition-all" style="width: 0%;"></div>
                </div>
            </div>
            <div id="onboarding-plan" class="space-y-8"></div>
        `;
        const planContainer = document.getElementById('onboarding-plan');
        planContainer.innerHTML = '';
        employee.plan.forEach((phaseData, index) => {
            const card = document.createElement('div');
            card.className = 'bg-white p-6 rounded-xl shadow-lg transition-shadow hover:shadow-2xl';
            const completedTasks = phaseData.focus.filter(t => t.completed).length;
            const totalTasks = phaseData.focus.length;
            const progress = totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0;
            
            card.innerHTML = `
                <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-4">
                    <h2 class="text-2xl font-bold odoo-purple-dark">Phase ${phaseData.phase}: ${phaseData.title}</h2>
                    <select class="output-status text-sm font-semibold py-1 px-2 rounded-md border-gray-300 focus-ring-odoo no-print mt-2 sm:mt-0" data-index="${index}">
                        ${['Nicht begonnen', 'In Arbeit', 'Abgeschlossen'].map(s => `<option ${phaseData.output.status === s ? 'selected' : ''}>${s}</option>`).join('')}
                    </select>
                </div>
                <div class="w-full bg-odoo-purple-light rounded-full h-2.5 mb-6"><div class="bg-odoo-purple-dark h-2.5 rounded-full" style="width: ${progress}%"></div></div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <h3 class="font-semibold text-lg mb-3">Schwerpunkte (Checkliste)</h3>
                        <div class="space-y-3">
                            ${phaseData.focus.map((task, taskIndex) => `
                                <label class="flex items-center cursor-pointer">
                                    <input type="checkbox" class="h-5 w-5 rounded border-gray-300 text-[#714b67] ring-offset-white focus:ring-2 focus:ring-[#714b67] no-print" data-phase-index="${index}" data-task-index="${taskIndex}" ${task.completed ? 'checked' : ''}>
                                    <span class="ml-3 text-gray-700">${task.text}</span>
                                </label>
                            `).join('')}
                        </div>
                    </div>
                    <div class="flex flex-col justify-between">
                         <div>
                            <h3 class="font-semibold text-lg mb-3">Kompetenzen</h3>
                            <div class="space-y-2">
                                 ${phaseData.competencies.map((comp, compIndex) => `
                                    <div class="flex items-center justify-between">
                                        <span class="text-gray-700 text-sm">${comp.name}</span>
                                        <select class="competency-rating border-gray-300 rounded-md text-sm py-1 no-print" data-phase-index="${index}" data-comp-index="${compIndex}">
                                            ${competencyLevels.map((level, i) => `<option value="${i}" ${comp.rating === i ? 'selected' : ''}>${level}</option>`).join('')}
                                        </select>
                                    </div>
                                `).join('')}
                            </div>
                        </div>
                        <button onclick="showDetailsView(${index})" class="mt-4 w-full bg-white border border-odoo-purple-dark text-odoo-purple-dark font-bold py-2 px-4 rounded-lg hover:bg-odoo-purple-dark hover:text-white transition-all">
                            Phasen-Output Anzeigen
                        </button>
                    </div>
                </div>
            `;
            planContainer.appendChild(card);
        });
        updateOverallProgress();
        addPlanEventListeners();
    }

    function renderDetailsView(phaseIndex) {
        if (chartInstance) chartInstance.destroy();
        detailsView.innerHTML = '';
        const employee = appData.employees[appData.currentEmployeeId];
        if (!employee) { showMainView(); return; }

        const isOverallSummary = phaseIndex === -1;
        const data = isOverallSummary ? null : employee.plan[phaseIndex];
        const title = isOverallSummary ? `Gesamt-Output für ${employee.name}` : `Output für Phase ${data.phase}: ${data.title}`;
        
        detailsView.innerHTML = `
            <div class="bg-white p-6 sm:p-8 rounded-xl shadow-2xl print-area">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-3xl font-bold odoo-purple-dark">${title}</h2>
                    <div class="no-print">
                        <button onclick="showMainView()" class="bg-gray-200 text-gray-800 font-bold py-2 px-4 rounded-lg hover:bg-gray-300 transition-all mr-2">← Zurück</button>
                        <button onclick="window.print()" class="bg-odoo-purple-dark text-white font-bold py-2 px-4 rounded-lg hover:bg-opacity-80 transition-all">Drucken / PDF</button>
                    </div>
                </div>
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                    <div class="lg:col-span-1"><h3 class="text-xl font-semibold mb-4 border-b-2 border-odoo-purple-light pb-2">Kompetenz-Visualisierung</h3><div class="p-4 bg-gray-50 rounded-lg h-80 sm:h-96 flex items-center justify-center"><canvas id="competencyChart"></canvas></div></div>
                    <div class="lg:col-span-1">${isOverallSummary ? renderOverallSummaryDetails(employee) : renderPhaseDetails(data)}</div>
                </div>
            </div>
        `;
        
        if (isOverallSummary) {
             document.getElementById('milestones-input').addEventListener('input', (e) => {
                employee.overallMilestones = e.target.value;
                saveData();
             });
        } else {
            document.querySelector('.notes-input').addEventListener('input', (e) => {
                data.notes = e.target.value;
                saveData();
            });
        }
        renderChart(phaseIndex);
    }

    function renderPhaseDetails(data) {
        return `
            <h3 class="text-xl font-semibold mb-4 border-b-2 border-odoo-purple-light pb-2">Details & Ergebnisse</h3>
            <div class="bg-purple-50 border-l-4 border-odoo-purple-dark p-4 rounded-r-lg mb-6"><h4 class="font-bold text-lg mb-2">Erwarteter Output</h4><p class="text-gray-700">${data.output.text}</p><p class="mt-2"><strong>Status:</strong> <span class="font-semibold">${data.output.status}</span></p></div>
            <div class="mb-6"><h4 class="font-bold text-lg mb-2">Abgeschlossene Aufgaben</h4><ul class="list-disc list-inside text-gray-600 space-y-1">${data.focus.filter(t => t.completed).map(t => `<li>${t.text}</li>`).join('') || '<li>Noch keine Aufgaben abgeschlossen.</li>'}</ul></div>
            <div><h4 class="font-bold text-lg mb-2">Notizen zur Phase</h4><textarea class="notes-input w-full p-2 border border-gray-300 rounded-md h-24 focus-ring-odoo no-print" placeholder="Anmerkungen, Erfolge...">${data.notes}</textarea><div class="notes-print hidden whitespace-pre-wrap p-2 border border-gray-200 rounded-md bg-gray-50">${data.notes || 'Keine Notizen.'}</div></div>
        `;
    }

    function renderOverallSummaryDetails(employee) {
        const totalTasks = employee.plan.reduce((s, p) => s + p.focus.length, 0);
        const completedTasks = employee.plan.reduce((s, p) => s + p.focus.filter(t => t.completed).length, 0);
        return `
            <h3 class="text-xl font-semibold mb-4 border-b-2 border-odoo-purple-light pb-2">Gesamtübersicht</h3>
            <div class="grid grid-cols-2 gap-4 mb-6 text-center">
                <div class="bg-gray-100 p-4 rounded-lg"><p class="text-2xl font-bold odoo-purple-dark">${completedTasks}/${totalTasks}</p><p class="text-sm text-gray-600">Aufgaben erledigt</p></div>
                <div class="bg-gray-100 p-4 rounded-lg"><p class="text-2xl font-bold odoo-purple-dark">${Math.round((completedTasks/totalTasks || 0) * 100)}%</p><p class="text-sm text-gray-600">Gesamtfortschritt</p></div>
            </div>
            <div><h4 class="font-bold text-lg mb-2">Meilensteine & Besondere Momente</h4><textarea id="milestones-input" class="w-full p-2 border border-gray-300 rounded-md h-48 focus-ring-odoo no-print" placeholder="Wichtige Erfolge, Lernerfahrungen...">${employee.overallMilestones || ''}</textarea><div class="milestones-print hidden whitespace-pre-wrap p-2 border border-gray-200 rounded-md bg-gray-50">${employee.overallMilestones || 'Keine Einträge.'}</div></div>
        `;
    }
    
    function renderChart(phaseIndex) {
        const ctx = document.getElementById('competencyChart').getContext('2d');
        const employee = appData.employees[appData.currentEmployeeId];
        const isOverallSummary = phaseIndex === -1;
        let labels, dataPoints;

        if (isOverallSummary) {
            const allCompetencies = employee.plan.flatMap(p => p.competencies);
            const uniqueCompetencies = [...new Map(allCompetencies.map(item => [item['name'], item])).values()];
            labels = uniqueCompetencies.map(c => c.name);
            dataPoints = labels.map(label => {
                const relevantRatings = allCompetencies.filter(c => c.name === label).map(c => c.rating);
                return relevantRatings.length > 0 ? relevantRatings.reduce((a, b) => a + b, 0) / relevantRatings.length : 0;
            });
        } else {
            const phaseData = employee.plan[phaseIndex];
            labels = phaseData.competencies.map(c => c.name);
            dataPoints = phaseData.competencies.map(c => c.rating);
        }

        chartInstance = new Chart(ctx, {
            type: 'radar',
            data: { labels: labels, datasets: [{
                label: 'Kompetenz-Level', data: dataPoints, backgroundColor: 'rgba(113, 75, 103, 0.2)', borderColor: 'rgba(113, 75, 103, 1)',
                pointBackgroundColor: 'rgba(113, 75, 103, 1)', pointBorderColor: '#fff', pointHoverBackgroundColor: '#fff', pointHoverBorderColor: 'rgba(113, 75, 103, 1)'
            }]},
            options: { responsive: true, maintainAspectRatio: false,
                scales: { r: {
                    angleLines: { color: 'rgba(0, 0, 0, 0.1)' }, grid: { color: 'rgba(0, 0, 0, 0.1)' },
                    pointLabels: { font: { size: 12 } }, suggestedMin: 0, suggestedMax: competencyLevels.length - 1,
                    ticks: { stepSize: 1, backdropColor: 'rgba(255, 255, 255, 0.75)', callback: (value) => competencyLevels[value] || '' }
                }},
                plugins: { legend: { display: false } }
            }
        });
    }

    // --- MODAL LOGIC ---
    function showModal(title, bodyHtml, confirmText, onConfirm, isDelete = false) {
        document.getElementById('modalTitle').textContent = title;
        document.getElementById('modalBody').innerHTML = bodyHtml;
        const confirmBtn = document.getElementById('modalConfirmBtn');
        confirmBtn.textContent = confirmText;
        
        confirmBtn.classList.remove('bg-odoo-purple-dark', 'hover:bg-opacity-80', 'bg-red-600', 'hover:bg-red-700');
        if (isDelete) {
            confirmBtn.classList.add('bg-red-600', 'hover:bg-red-700');
        } else {
            confirmBtn.classList.add('bg-odoo-purple-dark', 'hover:bg-opacity-80');
        }

        modalConfirmCallback = onConfirm;
        document.getElementById('modal').classList.remove('hidden');
    }

    function hideModal() {
        document.getElementById('modal').classList.add('hidden');
        modalConfirmCallback = null;
    }

    // --- EVENT HANDLING ---
    function setupEventListeners() {
        document.getElementById('addEmployeeBtn').addEventListener('click', handleAddEmployee);
        document.getElementById('deleteEmployeeBtn').addEventListener('click', handleDeleteEmployee);
        document.getElementById('employeeSelector').addEventListener('change', selectEmployee);
        document.getElementById('showOverallOutputBtn').addEventListener('click', () => showDetailsView(-1));

        // Modal listeners
        document.getElementById('modalCancelBtn').addEventListener('click', hideModal);
        document.getElementById('modalConfirmBtn').addEventListener('click', () => {
            if (typeof modalConfirmCallback === 'function') {
                modalConfirmCallback();
            }
        });
    }

    function addPlanEventListeners() {
        const employee = appData.employees[appData.currentEmployeeId];
        if (!employee) return;

        document.querySelectorAll('input[type="checkbox"]').forEach(cb => {
            cb.addEventListener('change', (e) => {
                const { phaseIndex, taskIndex } = e.target.dataset;
                employee.plan[phaseIndex].focus[taskIndex].completed = e.target.checked;
                updateOverallProgress();
                saveData();
            });
        });
        document.querySelectorAll('.output-status').forEach(sel => sel.addEventListener('change', (e) => {
            employee.plan[e.target.dataset.index].output.status = e.target.value;
            saveData();
        }));
        document.querySelectorAll('.competency-rating').forEach(sel => sel.addEventListener('change', (e) => {
            const { phaseIndex, compIndex } = e.target.dataset;
            employee.plan[phaseIndex].competencies[compIndex].rating = parseInt(e.target.value, 10);
            saveData();
        }));
    }

    // --- LOGIC FUNCTIONS ---
    function handleAddEmployee() {
        const title = "Neuen Mitarbeiter anlegen";
        const bodyHtml = `
            <div>
                <label for="newEmployeeName" class="block text-sm font-medium text-gray-700">Name des Mitarbeiters</label>
                <input type="text" id="newEmployeeName" class="mt-1 w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus-ring-odoo" placeholder="Max Mustermann" required>
            </div>`;
        const confirmText = "Speichern";
        
        const onConfirm = () => {
            const input = document.getElementById('newEmployeeName');
            const name = input.value;
            if (name && name.trim() !== "") {
                const id = Date.now().toString();
                appData.employees[id] = {
                    id: id,
                    name: name.trim(),
                    plan: JSON.parse(JSON.stringify(defaultPlanTemplate)),
                    overallMilestones: ""
                };
                appData.currentEmployeeId = id;
                saveData();
                renderApp();
                hideModal();
            } else {
                input.focus();
                input.classList.add('border-red-500');
            }
        };

        showModal(title, bodyHtml, confirmText, onConfirm, false);
        setTimeout(() => document.getElementById('newEmployeeName').focus(), 50);
    }

    function handleDeleteEmployee() {
        const id = appData.currentEmployeeId;
        if (!id) return;
        const employeeName = appData.employees[id].name;

        const title = "Mitarbeiter löschen";
        const bodyHtml = `<p>Möchten Sie das Profil von "<strong>${employeeName}</strong>" wirklich endgültig löschen?</p>`;
        const confirmText = "Endgültig löschen";

        const onConfirm = () => {
            delete appData.employees[id];
            appData.currentEmployeeId = null;
            saveData();
            renderApp();
            hideModal();
        };

        showModal(title, bodyHtml, confirmText, onConfirm, true);
    }
    
    function selectEmployee(e) {
        appData.currentEmployeeId = e.target.value || null;
        saveData();
        renderApp();
    }
    
    function updateOverallProgress() {
        const employee = appData.employees[appData.currentEmployeeId];
        if (!employee) return;
        const totalTasks = employee.plan.reduce((s, p) => s + p.focus.length, 0);
        const completedTasks = employee.plan.reduce((s, p) => s + p.focus.filter(t => t.completed).length, 0);
        const progress = totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0;
        const progressBar = document.getElementById('overall-progress-bar');
        if(progressBar) progressBar.style.width = `${progress}%`;
    }

    function updateButtons() {
        const hasSelection = !!appData.currentEmployeeId;
        document.getElementById('deleteEmployeeBtn').disabled = !hasSelection;
        document.getElementById('showOverallOutputBtn').disabled = !hasSelection;
    }

    // --- INITIALIZATION ---
    document.addEventListener('DOMContentLoaded', () => {
        loadData();
        setupEventListeners();
        renderApp();
    });
    </script>
</body>
</html>
